# 3. Осуществить программу работы с органическими клетками, состоящими из ячеек. Необходимо
# создать класс «Клетка». В его конструкторе инициализировать параметр, соответствующий
# количеству ячеек клетки (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
# умножение (__mul__()), деление (__floordiv____truediv__()). Эти методы должны применяться
# только к клеткам и выполнять увеличение, уменьшение, умножение и округление до целого
# числа деления клеток соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться
# сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять, только если разность
# количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки — произведение
# количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как
# целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и
# количество ячеек в ряду. Этот метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n
# равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний
# ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5. В этом
# случае метод make_order() вернёт строку: *****\n*****\n**.
# Или количество ячеек клетки — 15, а количество ячеек в ряду равняется 5. Тогда метод
# make_order() вернёт строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.

class Cell:
    def __init__(self, units):
        self.units = int(units)

    def __add__(self, other):
        summ = self.units + other.units
        return Cell(summ)

    def __sub__(self, other):
        deduct = self.units - other.units
        if deduct > 0:
            return Cell(deduct)
        else:
            return 'Разность количества ячеек меньше или равна нулю.'

    def __mul__(self, other):
        mult = self.units + other.units
        return Cell(mult)

    def __floordiv__(self, other):
        div = self.units // other.units
        return Cell(div)

    def make_order(self, example, row_units):
        full_rows = example.units // row_units
        line_list = []
        for _ in range(example.units + full_rows):
            line_list.append('*')
        count = 5
        for i in range(full_rows):
            line_list[count] = '\n'
            count += 6
        return ''.join(line_list)


c1 = Cell(24)
c2 = Cell(27)
print(c1 + c2)
print(c1 - c2)
print(c1 * c2)
print(c1 // c2)
print(c1.make_order(c1, 5))
